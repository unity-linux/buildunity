sudo: required
language: bash
services:
- docker
install: true
before_install:
- openssl aes-256-cbc -K $encrypted_9a84c225b0b7_key -iv $encrypted_9a84c225b0b7_iv -in .stuff.tar.gz.enc -out stuff.tar.gz -d
- file stuff.tar.gz
- tar xzvf stuff.tar.gz -C /tmp/
- eval "$(ssh-agent -s)"
- chmod 600 /tmp/stuff/.deploy
- ssh-add /tmp/stuff/.deploy
- mv /tmp/stuff/.host ~/.ssh/config
- gem install travis
- sh /tmp/stuff/.travis_login
env:
- TASK_FULL="task-unity-lxqt-live-i586"
- TASK_FULL="task-unity-lxqt-live-x86_64"
script:
- TASK_RPM=$(echo $TASK_FULL | cut -d- -f1-4)
- TASK_NAME=$(echo $TASK_FULL | cut -d- -f3-5)
- ARCH=$(echo $TASK_FULL | cut -d- -f5)
- docker pull jmiahman/mageia-rpmbuilder-${ARCH}
- export DID=$(docker images -a | grep -m1 mageia-rpmbuilder | awk '{print $3}')
- echo $DID
- docker run --hostname=unity-linux --privileged=true -d -v "$(pwd):/rpmbuild" -v "/dev:/dev" -v "/sys/fs/cgroup:/sys/fs/cgroup:ro" $DID tail -f /dev/null
- export CID=$(docker ps -l | awk '{print $1}' | grep -v -m1 'CONTAINER')
- echo $CID
- docker exec $CID /bin/sh -c 'dnf clean packages &>> /rpmbuild/iso_build.log'
- docker exec $CID /bin/sh -c 'sed -i "s%gpgcheck=1%gpgcheck=0%g" /etc/yum.repos.d/*.repo &>> /rpmbuild/iso_build.log'
- if [ "${ARCH}" == "i586" ]; then docker exec $CID /bin/sh -c 'setarch i586 dnf install --setopt=install_weak_deps=False mklivecd -y &>> /rpmbuild/iso_build.log'; fi
- if [ "${ARCH}" == "x86_64" ]; then docker exec $CID /bin/sh -c 'setarch x86_64 dnf install --setopt=install_weak_deps=False mklivecd mtools -y &>> /rpmbuild/iso_build.log'; fi
- docker exec $CID /bin/sh -c 'dnf -y install acr38u awesfx b43-openfwwf btrfs-progs davfs2 dmraid gdisk gparted hdparm hso-rezero ipset jfsutils kpartx ld10k1 libselinux-utils lvm2 mdadm microcode_ctl ndiswrapper opensc parted pcmciautils policycoreutils reiserfsprogs rng-utils rsyslog system-config-printer-udev usbutils vaapi-driver-intel xfsprogs acl cgroup xinetd ldetect irqbalance harddrake zd1211-firmware draklive-install drakx-finish-install libinput-tools xdm &>> /rpmbuild/iso_build.log'
- if [ "$TASK_FULL" == "task-unity-lxqt-live-i586" ]; then export taskcmd='setarch i586 dnf install --nogpgcheck --setopt=install_weak_deps=False task-unity-lxqt-live -y &>> /rpmbuild/iso_build.log'; fi
- if [ "$TASK_FULL" == "task-unity-lxqt-live-x86_64" ]; then export taskcmd='setarch x86_64 dnf install --nogpgcheck --setopt=install_weak_deps=False task-unity-lxqt-live -y &>> /rpmbuild/iso_build.log'; fi
- if [ "$TASK_RPM" == "task-unity-enlightenment-live" ]; then export taskcmd='dnf install --setopt=install_weak_deps=False task-unity-enlightenment-live -y &>> /rpmbuild/iso_build.log'; fi
- echo "$taskcmd"
- docker exec $CID /bin/sh -c "$taskcmd"
- docker exec $CID /bin/sh -c 'dnf update --setopt=install_weak_deps=False -y &>> /rpmbuild/iso_build.log'
# mtools conflicts with mklivecd/grub2-mkrescue
- docker exec $CID /bin/sh -c 'dnf -y remove mtools &>> /rpmbuild/iso_build.log'
- docker exec $CID /bin/sh -c 'dnf clean all &>> /rpmbuild/iso_build.log'
- docker exec $CID /bin/sh -c 'echo $(echo "---Checks---" ; rpm -qa | grep glibc ; rpm -qa | grep mtools ; file /usr/lib*/gconv/IBM850.so ; echo "---Checks---") 2>&1 | tee -a /rpmbuild/iso_build.log'
- mkdir -p ${TASK_NAME}
- export LIVE_LOG=$(readlink -f ./*.log)
- if [ "$TRAVIS_TEST_RESULT" == "1" ]; then mv $LIVE_LOG ./${TASK_NAME}/FAILED_BUILD.log && rsync -arz --progress --rsh=ssh -e "ssh -o StrictHostKeyChecking=no" ./${TASK_NAME} foobar2:public_html/pub/isos/; travis restart -r unity-linux/buildunity; exit 1; fi
- docker exec -d $CID /bin/sh -c 'mklivecd --tmp /rpmbuild --xz /rpmbuild/live.iso --nodir ^/rpmbuild --boottheme=Unity-Default &>> /rpmbuild/iso_build.log'
- docker exec $CID /bin/sh -c 'while ps ax | grep mklivecd | grep -v grep > /dev/null ; do sleep 60 ; export x="$(($x+1))" ; echo "--==|mklivecd has been running for $x minute(s)|==--" ; done'
- docker exec $CID /bin/sh -c 'rpm -qa &> /rpmbuild/rpm.list'
- export LIVE_ISO=$(readlink -f ./*.iso)
- export RPM_LIST=$(readlink -f ./rpm.list)
- mv $LIVE_ISO ./$TASK_NAME/${TASK_NAME}-$(date +%Y%m%d%H).iso
- mv $LIVE_LOG ./$TASK_NAME/${TASK_NAME}-$(date +%Y%m%d%H).log
- mv $RPM_LIST ./$TASK_NAME/${TASK_NAME}-$(date +%Y%m%d%H).rpmlist
- export NEW_ISO=$(readlink -f ./$TASK_NAME/*.iso)
- echo "$NEW_ISO"
- md5sum "$NEW_ISO" > ./$TASK_NAME/$(basename "$NEW_ISO").md5
- if [ "$TRAVIS_TEST_RESULT" == "1" ]; then rsync -arz --progress --rsh=ssh -e "ssh -o StrictHostKeyChecking=no" ./$TASK_NAME foobar2:public_html/pub/isos/; fi
after_success:
- rsync -arz --progress --delete --rsh=ssh -e "ssh -o StrictHostKeyChecking=no" ./$TASK_NAME foobar2:public_html/pub/isos/ &
- rsync -arz --progress --delete --rsh=ssh -e "ssh -o StrictHostKeyChecking=no" ./$TASK_NAME foobar:/var/www/html/isos/ &
- wait %1 %2
